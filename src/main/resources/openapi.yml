openapi: 3.0.1
info:
  title: Customer Service API
  description: Reactive API to manage customers.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local server
tags:
  - name: Customers
    description: Customer operations
paths:
  /api/customers:
    get:
      tags: [Customers]
      summary: List all customers
      operationId: listCustomers
      parameters:
        - name: type
          in: query
          required: false
          description: Filter by customer type
          schema:
            type: string
            enum: [PERSON, BUSINESS]
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomerResponse"
        '500':
          description: Internal server error
    post:
      tags: [Customers]
      summary: Create a new customer
      operationId: createCustomer
      requestBody:
        description: New customer details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerRequest"
            examples:
              sample:
                value:
                  firstName: John
                  lastName: Doe
                  email: john.doe@example.com
                  documentNumber: "12345678"
                  type: PERSON
                  phone: "+1-555-1234"
                  address:
                    line1: "742 Evergreen Terrace"
                    city: Springfield
                    country: USA
                  active: true
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        '400':
          description: Invalid request data
        '500':
          description: Internal server error

  /api/customers/{id}:
    get:
      tags: [Customers]
      summary: Get customer by ID
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        '404':
          description: Customer not found
    put:
      tags: [Customers]
      summary: Update an existing customer
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated customer details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerRequest"
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        '404':
          description: Customer not found
    delete:
      tags: [Customers]
      summary: Delete a customer
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found

components:
  schemas:
    CustomerRequest:
      type: object
      properties:
        firstName:
          type: string
          description: Customer's first name
        lastName:
          type: string
          description: Customer's last name
        email:
          type: string
          format: email
          description: Customer's email address
        documentNumber:
          type: string
          description: Customer's document number (ID, passport, etc.)
        type:
          type: string
          description: Customer type
          enum: [PERSON, BUSINESS]
        phone:
          type: string
          description: Customer's phone number
        address:
          type: object
          description: Customer's address
          properties:
            line1:
              type: string
              description: Address line 1
            city:
              type: string
              description: City
            country:
              type: string
              description: Country
        active:
          type: boolean
          description: Whether the customer is active
      required:
        - firstName
        - lastName
        - documentNumber
        - type

    CustomerResponse:
      allOf:
        - $ref: "#/components/schemas/CustomerRequest"
        - type: object
          properties:
            id:
              type: string
              description: Unique customer ID
            createdAt:
              type: string
              format: date-time
              description: Creation date
